#ifndef PROXY_INCLUDE_CLIENT_H_
#define PROXY_INCLUDE_CLIENT_H_

#include "socket.h"

#define MAX_CLIENT_EVENTS (254) /* Amount of file descriptor of monitoring */
#define EVENT_TIMEOUT (8) /* EPOLL event timeout as milliseconds */
#define FTP_COMMAND_PORT (21)

struct client
{
	struct socket* command_socket;
	struct socket* data_socket;
	int epoll_fd;
};

/* CLIENT RETURN CODE DEFINE */
enum client_error_type
{
	/**/
	CLIENT_COMMAND_RECEIVED_INVALID,
	CLIENT_COMMAND_RECEIVED_INVALID_PARAM,
	/**/
	CLIENT_DATA_RECEIVED_INVALID,
	CLIENT_DATA_RECEIVED_INVALID_PARAM,
	/**/
	CLIENT_READ_PACKET_INVALID,
	CLIENT_READ_PACKET_INVALID_PARAM,
	CLIENT_READ_PACKET_CONNECTION_CLOSED,
	CLIENT_READ_PACKET_CONNECTION_ERROR,
	CLIENT_READ_PACKET_SUCCESS,
	/**/
	CLIENT_CONNECT_POLLING_EPOLL_CREATE_FAILED,
	CLIENT_CONNECT_POLLING_SOCKET_CREATE_FAILED,
	CLIENT_CONNECT_POLLING_SOCKET_BIND_FAILED,
	CLIENT_CONNECT_POLLING_SOCKET_LISTEN_FAILED,
	CLIENT_CONNECT_POLLING_EPOLL_CTL_FAILED,
	CLIENT_CONNECT_POLLING_EPOLL_WAIT_FAILED,
	CLIENT_CONNECT_POLLING_SOCKET_ACCEPT_ERROR,
	CLIENT_CONNECT_POLLING_SUCCESS,
	/**/
	CLIENT_FREE_INVALID,
	CLIENT_FREE_SUCCESS,
	/**/
	CLIENT_LOOP_INVALID,
	CLIENT_LOOP_SUCCESS,
	/**/
	CLIENT_SEND_PACKET_INVALID,
	CLIENT_SEND_PACKET_INVALID_PARAM,
	CLIENT_SEND_PACKET_SUCCESS
};

int clients_connect_polling(void);
int client_loop(struct list* session_list);
int send_packet_to_client(struct client* target_client, char* buffer, int received_bytes, int port_type);

#endif